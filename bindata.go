// Code generated by go-bindata.
// sources:
// term.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _termHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\x4d\x8f\xd3\x40\x0c\xbd\xe7\x57\x98\x70\x49\xb4\x30\xe9\xf2\x25\x91\x8f\x82\x10\x37\x8e\x8b\xc4\x79\x3a\x71\x9b\xd0\xc9\x38\x1a\x3b\x9b\x2d\x55\xff\x3b\x9a\x26\x6d\x50\x17\x69\x4f\x91\xdf\x9b\xf7\x6c\xbf\xb8\x7c\x55\x93\x91\x43\x8f\xd0\x48\x67\xd7\x51\x69\x5b\xb7\x07\x8f\xb6\x8a\x59\x0e\x16\xb9\x41\x94\x18\x1a\x8f\xdb\x2a\x6e\x44\x7a\xce\xb3\x6c\x70\xfd\x7e\xa7\x0c\x75\xd9\x93\xa0\xef\xbe\x7e\x50\x9f\xd5\x2a\x33\xcc\x53\xad\x0c\x73\x0c\xd9\x3a\x2a\xd9\xf8\xb6\x17\x60\x6f\x5e\x12\xdb\x76\x33\x8b\x7f\x73\x0c\xeb\x32\x9b\xa4\xc1\x23\x8c\xb1\x8e\x00\x36\x54\x1f\xe0\x08\x1b\x6d\xf6\x3b\x4f\x83\xab\x73\x78\xbd\x5a\xad\x0a\x38\x45\x00\x2a\x68\x5b\xa7\x2d\x1c\x61\x4b\x4e\xde\x72\xfb\x07\x73\xb8\xff\xd4\x3f\x85\x07\x65\x36\xdb\x94\x17\xdf\x22\xd9\x0e\xce\x48\x4b\x2e\x49\xe1\x18\x01\x8c\xad\xab\x69\x54\xe4\x2c\xe9\x1a\x2a\xb8\xa1\x01\x1e\xb5\x87\xde\x93\x90\x21\x0b\x15\x24\x96\x8c\x0e\x0f\xd4\x02\x56\x30\xaf\x19\xa7\xf0\x05\xe2\x31\xe4\x90\x87\x6f\x7c\x75\x60\x32\x7b\x14\xa8\xc0\xe1\x08\xbf\x70\xf3\x70\xae\x93\x8b\xc7\x5d\x9c\x67\x59\x7c\x77\xf5\x6e\x88\x65\xa9\x7a\x2d\x8d\xd3\x1d\xa6\xc5\xd9\x6f\xf2\x52\xe4\xa8\x47\xf7\xbf\x91\xa7\x96\x21\x9a\xb9\xe1\xcf\x39\xa5\xe4\xc2\x03\x18\xb2\x9c\xc3\xfd\xbb\xd5\x9b\x2b\xe4\x69\xe4\x1c\xde\x7f\x5c\x90\x81\xf1\x21\x04\x98\x83\xf8\x01\x17\xdc\x0c\x9e\xc9\x7f\x0b\x47\x73\x4b\xb1\xf1\x88\xee\x07\x1e\x78\x62\x66\xe2\x34\xcf\x0e\xe7\xb1\x14\xb9\xef\x5a\xf4\xf2\x2f\x6a\x2d\x3a\x85\xe3\x65\x35\x46\x57\x4f\x58\xf1\x4c\xd9\xa3\x4b\x6a\x32\x43\x87\x4e\x54\x38\x8e\x2b\x7f\xcd\xa5\x43\x66\xbd\xc3\x7f\xa3\xc1\x47\x74\x12\x3a\x9c\x4d\x46\xdf\x0a\x4e\x98\xba\xb4\x79\xe6\x62\x2c\x31\xde\xc4\x3b\xc9\x6b\x64\xf1\x74\x48\x16\x59\xb8\xc5\x53\x11\x9d\x52\x65\xb4\xb5\x89\x34\x2d\xa7\x45\xb4\x9c\xf3\xdf\x00\x00\x00\xff\xff\xf0\x62\x17\x0c\x70\x03\x00\x00")

func termHtmlBytes() ([]byte, error) {
	return bindataRead(
		_termHtml,
		"term.html",
	)
}

func termHtml() (*asset, error) {
	bytes, err := termHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "term.html", size: 880, mode: os.FileMode(420), modTime: time.Unix(1609280634, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"term.html": termHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"term.html": &bintree{termHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

