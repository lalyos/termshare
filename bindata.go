// Code generated by go-bindata.
// sources:
// term.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _termHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x53\x4f\x8f\xd3\x3e\x10\xbd\xe7\x53\xcc\x2f\xbf\x4b\xa2\xa5\x4e\x17\x16\x24\x92\xb4\x2c\x08\x71\x81\xdb\x22\x71\x76\x9d\x49\x13\xea\xda\x91\x67\xb2\xd9\x52\xf5\xbb\x23\xe7\x4f\xb3\x5b\x58\x81\xc4\x29\x99\x79\x9e\xf7\xc6\x6f\xc6\xf9\x7f\x85\x55\x7c\x68\x10\x2a\xde\xeb\x75\x90\xeb\xda\xec\xc0\xa1\x5e\x85\xc4\x07\x8d\x54\x21\x72\x08\x95\xc3\x72\x15\x56\xcc\x0d\xa5\x49\xd2\x9a\x66\xb7\x15\xca\xee\x93\x07\x46\xb7\xbf\xbd\x11\x6f\xc5\x32\x51\x44\x43\x2c\x14\x51\x08\xc9\x3a\xc8\x49\xb9\xba\x61\x20\xa7\xfe\x54\xac\xeb\xcd\x58\xfc\x9d\x42\x58\xe7\xc9\x50\xfa\x77\x1c\x0b\x59\x14\xd6\x2c\x3a\xdc\x2c\x7c\xfb\x74\xbb\x14\x37\x8f\x39\x2f\xf1\x7f\xd0\x28\x6b\x7e\x86\xbd\xac\xf9\x92\x37\xc8\x7b\x0f\xd7\x01\xc0\xc6\x16\x07\x38\xc2\x46\xaa\xdd\xd6\xd9\xd6\x14\x29\xfc\xbf\x5c\x2e\x33\x38\x05\x00\xc2\xd3\xd4\x46\x6a\x38\x42\x69\x0d\x2f\xa8\xfe\x81\x29\x5c\xbf\x69\x1e\xfc\x81\x3c\x19\x69\xf2\x89\x38\x8b\xca\xd6\x28\xae\xad\x89\x62\x38\x06\x00\x5d\x6d\x0a\xdb\x09\x6b\xb4\x95\x05\xac\xe0\x02\x06\xb8\x97\x0e\x1a\x67\xd9\x2a\xab\x61\x05\x91\xb6\x4a\xfa\x03\x62\x4e\xae\x60\xbc\x7b\x18\xc3\x3b\x08\x3b\x3f\xc4\xd4\x7f\xc3\x33\x03\x59\xb5\x43\x86\x15\x18\xec\xe0\x1b\x6e\xee\xfa\x38\x9a\x38\xae\xc2\x34\x49\xc2\xab\x33\x77\x65\x89\xe7\xa8\x91\x5c\x19\xb9\xc7\x38\xeb\xf9\x06\x2e\x61\x8d\x6d\xd0\xfc\xae\xe5\x41\xd2\x5b\x33\x0a\x7e\x1d\x5d\x8a\x26\x1c\x40\x59\x4d\x29\x5c\xbf\x5c\xbe\x38\xa7\x9c\xed\x28\x85\x57\xaf\xe7\x4c\x4b\x78\xe7\x0d\x4c\x81\x5d\x8b\x73\x5e\xb5\x8e\xac\xfb\xe0\x57\xe2\x12\x22\xe5\x10\xcd\x67\x3c\xd0\x80\x8c\xc0\x69\xec\x1d\xfa\xb6\x84\x37\xfb\xbd\x1f\x7e\x34\xfa\xf1\xc5\x6f\x57\x9f\x11\x4f\xa2\x28\x8e\xb3\x20\x98\x5a\x36\xc4\x50\xd6\xdc\x23\xe3\xd5\x3e\x8d\xa1\x98\x7e\xa2\xe7\x94\xa6\xc2\xa7\xb8\x35\x1f\x25\xcb\x79\x2b\x0a\xc9\x32\x86\xe3\x64\x32\xa1\x29\x86\x5c\x76\x79\x07\xef\x7e\x54\x58\xd5\xee\xd1\xb0\xf0\x6b\x7a\xc6\x27\x29\x51\xd6\x3c\xf7\x73\x9e\xdb\x1e\x89\xe4\x16\x1f\x8f\x0e\xef\xd1\xb0\xd7\xed\xa9\x3b\x57\x33\x0e\x39\x31\x89\xff\xc2\xa2\xb4\x25\xbc\x18\xff\x50\x5e\x20\xb1\xb3\x87\x68\x2e\xf3\x6f\xe5\x94\x05\xa7\x58\x28\xa9\x75\xc4\x55\x4d\x71\x16\xcc\xef\xed\x67\x00\x00\x00\xff\xff\x84\xc6\xaf\x3f\xcd\x04\x00\x00")

func termHtmlBytes() ([]byte, error) {
	return bindataRead(
		_termHtml,
		"term.html",
	)
}

func termHtml() (*asset, error) {
	bytes, err := termHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "term.html", size: 1229, mode: os.FileMode(420), modTime: time.Unix(1609280898, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"term.html": termHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"term.html": &bintree{termHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

